/**
 * 
 */
package com.playarea;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author chandrashekharv
 *
 */
public class LongestPalindromicSubstring {

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		String source = "abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefmalayalamabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef";
		source = "kdobsnyvmpmivjwsawqlhisozlvgookymxefpxjpblyjvzjoihuwjavdtdaoouipflwqwwnepmlguhwvwmspsjykjvvzrkpdhusrpvwispdrnqdaunveqgabcnxfcusrkievozqslltozfrclketnqstfecwaesauvipbgelnwegrscdnezpvabqghpoqussrzbiqohxvcripdmntlvruehqvirvogbnvonngloytuztmbpjmowjanfnytynpdbikqqnlpsfiypwzjjelmfgrugfqwkccnqywrwbxutauwdbaawwvbzwsloabxkexzxllslfjrqmxhoiynujhlhhrbgwmyhhqvogqvzofgryjbuuxsyiacreuhbexuoqltmmnnehhkmcbrdfmaldakylexrhyboalbbtfkbuotsktbvztoowsznqwqwpwsibyglkmoaydzshggltlvcxvazczjfbwtvpgxdnreyewcyvdnpfuytqkwlgmcdkhvrfxnddpxgdkmsdhpphiktzqslnwlhhtzucdgsvoefsegodnuqrmjsgjgvhxzvjwwdtsoqpppbphorkcezlifwppcmwqewxdehicjttpgmdqbavklnvovzctajceiaqhpjaiijmfrxqfsdoeygpirlparkxlbwmmbixtquekdwzrueszslhperwzonuzslksvieypxzbwgzxgjqojfeptkemfadafsyamzsizsljilbteokiixqdrevyrtowiljmruvkhkwwsdkbcfjjxdpieppmnanmsxulvnbprworaglhpkozpuwepqipvznzgwbwwnapasoqdjqkfmnduahkzbfkwrgqimfnqkzymqnevkbupyynhwflkunypntumnrflijesdvajrqsgyhytytbaospuwdfwsadmluocxehngmmnakyjwdcrxeptmshmurdfocpmiynopwraxpvlvffqfrvjesgaezisfhklrxkuqcbciz";
		source="abccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaaaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaaaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabbaabccccbaabccbaabccccbaabccbaabccccbbccccbaabccbaabccccccccbaabccbaabccccbbccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbbccbaabccbbccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaabccbaabccccbaab";
		source = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaassssabcdefgh";
		lps(source);

	}

	private static void lps(String sour) {

		Map<Character, List<Integer>> charIndex = new HashMap<>();
		for (int i = 0; i < sour.length(); i++) {
			final int index = i;
			charIndex.compute(sour.charAt(i), (k, v) -> {
				if (v == null)
					v = new ArrayList<>();
				v.add(index);

				return v;
			});
		}

		int maxLength = Integer.MIN_VALUE;
		for (char c : charIndex.keySet()) {
			List<Integer> indices = charIndex.get(c);
			if (indices.size() <= 1) // Can't possibly form palindrome with one instance of character. The counter part is needed.
				continue;

			int index = 0;
			for (int k = index; k < indices.size(); k++) {
				int end = indices.size() - 1;
				// Take two at a time
				boolean found = true;
				for (int l = end; l > k; l--) {
					int startInd = indices.get(index);
					int endIndex = indices.get(end);
					int count = 0;

					for (int i = startInd, j = endIndex; i <= j; i++, j--) {
						if (sour.charAt(i) != sour.charAt(j)) {
							found = false;
							break;
						} else if (i != j)
							count += 2;
						if (i == j)
							count += 1;
					}
					if (found) {
						maxLength = maxLength > count ? maxLength : count;
						break;
					} else {
						end -= 1;
					}

				}
				if (!found)
					index += 1;
				else
					break;
			}
		}

		System.out.println(maxLength);
	}
}
